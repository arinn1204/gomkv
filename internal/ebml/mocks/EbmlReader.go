// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	specification "github.com/arinn1204/gomkv/internal/ebml/specification"
	mock "github.com/stretchr/testify/mock"
)

// EbmlReader is an autogenerated mock type for the EbmlReader type
type EbmlReader struct {
	mock.Mock
}

// GetCurrentPosition provides a mock function with given fields:
func (_m *EbmlReader) GetCurrentPosition() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetID provides a mock function with given fields: maxCount
func (_m *EbmlReader) GetID(maxCount int) {
	_m.Called(maxCount)
}

// GetSpecificationForId provides a mock function with given fields: _a0
func (_m *EbmlReader) GetSpecificationForId(_a0 uint32) *specification.EbmlData {
	ret := _m.Called(_a0)

	var r0 *specification.EbmlData
	if rf, ok := ret.Get(0).(func(uint32) *specification.EbmlData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*specification.EbmlData)
		}
	}

	return r0
}

// readUntilElementFound provides a mock function with given fields: endPosition, process
func (_m *EbmlReader) readUntilElementFound(endPosition int64, process func(uint32, int64, *specification.EbmlData) error) error {
	ret := _m.Called(endPosition, process)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, func(uint32, int64, *specification.EbmlData) error) error); ok {
		r0 = rf(endPosition, process)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewEbmlReaderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewEbmlReader creates a new instance of EbmlReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEbmlReader(t NewEbmlReaderT) *EbmlReader {
	mock := &EbmlReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
