// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	ebml "github.com/arinn1204/gomkv/internal/ebml"

	mock "github.com/stretchr/testify/mock"
)

// ebmlFieldProcessor is an autogenerated mock type for the ebmlFieldProcessor type
type ebmlFieldProcessor struct {
	mock.Mock
}

// processField provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *ebmlFieldProcessor) processField(_a0 interface{}, _a1 uint32, _a2 int64, _a3 *ebml.Ebml) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint32, int64, *ebml.Ebml) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type newEbmlFieldProcessorT interface {
	mock.TestingT
	Cleanup(func())
}

// newEbmlFieldProcessor creates a new instance of ebmlFieldProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newEbmlFieldProcessor(t newEbmlFieldProcessorT) *ebmlFieldProcessor {
	mock := &ebmlFieldProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
